思路
1、NxN 的棋盘里放置 N 个皇后，每行有且仅有一个，因此可以用一个存储 N 个数字的 List 来存放每种情况，并用一个 List 来存放所有的结果，最后用 length 输出这个 List 的长度，这个长度即为解的个数。
2、第一步是获取所有的情况 ( 8 ^ 8 种) 然后筛选出满足的解
place 0 = [[]]
place n = [ q:row | row <- place(n-1) , q <- [1..x] ]  // x 如果取 n 的话会出问题，暂且用 x 代替
3、用 place 函数就可以输出需要的结果，加入限定条件来筛选出解
place n = [ q:row | row <- place(n-1) , q <- [1..x] , safe q row ]
用 q 'elem' row 判断是否在同一列，如果为真，取反得到假
取一个 i <- [0..7] 对于每一个 i 和即将插入的 q 判断 ( q - row !! i ) 的绝对值是否等于 i+1 如果为真则说明会被斜着攻击到，对返回值取反得到假

*Main> place 4
[[1,1,1,1],[2,1,1,1],[3,1,1,1],[4,1,1,1],[5,1,1,1],[6,1,1,1],[7,1,1,1],[8,1,1,1],[1,2,1,1],[2,2,1,1],[3,2,1,1],[4,2,1,1],[5,2,1,1],[6,2,1,1],[7,2,1,1],[8,2,1,1],[1,3,1,1],[2,3,1,1],[3,3,1,1],[4,3,1,1],[5,3,1,1],[6,3,1,1],[7,3,1,1],[8,3,1,1],[1,4,1,1],[2,4,1,1],[3,4,1,1],[4,4,1,1],[5,4,1,1],[6,4,1,1],[7,4,1,1],[8,4,1,1],[1,5,1,1],[2,5,1,1],[3,5,1,1],[4,5,1,1],[5,5,1,1],[6,5,1,1],[7,5,1,1],[8,5,1,1],[1,6,1,1],[2,6,1,1],[3,6,1,1],[4,6,1,1],[5,6,1,1],[6,6,1,1],[7,6,1,1],[8,6,1,1],[1,7,1,1],[2,7,1,1],[3,7,1,1],[4,7,1,1],[5,7,1,1],[6,7,1,1],[7,7,1,1],[8,7,1,1],[1,8,1,1],[2,8,1,1],[3,8,1,1],[4,8,1,1],[5,8,1,1],[6,8,1,1],[7,8,1,1],[8,8,1,1],[1,1,2,1],[2,1,2,1],[3,1,2,1],[4,1,2,1],[5,1,2,1],[6,1,2,1],[7,1,2,1],[8,1,2,1],[1,2,2,1],[2,2,2,1],[3,2,2,1],[4,2,2,1],[5,2,2,1],[6,2,2,1],[7,2,2,1],[8,2,2,1],[1,3,2,1],[2,3,2,1],[3,3,2,1],[4,3,2,1],[5,3,2,1],[6,3,2,1],[7,3,2,1],[8,3,2,1],[1,4,2,1],[2,4,2,1],[3,4,2,1],[4,4,2,1],[5,4,2,1],[6,4,2,1],[7,4,2,1],[8,4,2,1],[1,5,2,1],[2,5,2,1],[3,5,2,1],[4,5,2,1],[5,5,2,1],[6,5,2,1],[7,5,2,1],[8,5,2,1],[1,6,2,1],[2,6,2,1],[3,6,2,1],[4,6,2,1],[5,6,2,1],[6,6,2,1],[7,6,2,1],[8,6,2,1],[1,7,2,1],[2,7,2,1],[3,7,2,1],[4,7,2,1],[5,7,2,1],[6,7,2,1],[7,7,2,1],[8,7,2,1],[1,8,2,1],[2,8,2,1],[3,8,2,1],[4,8,2,1],[5,8,2,1],[6,8,2,1],[7,8,2,1],[8,8,2,1],[1,1,3,1],[2,1,3,1],[3,1,3,1],[4,1,3,1],[5,1,3,1],[6,1,3,1],[7,1,3,1],[8,1,3,1],[1,2,3,1],[2,2,3,1],[3,2,3,1],[4,2,3,1],[5,2,3,1],[6,2,3,1],[7,2,3,1],[8,2,3,1]

取一部分 place 4 的值进行验算后发现 i 的取值过宽，应该根据当前 row 的长度来取值，所以取 i <- [0..(length row - 1)]

4、修改 place 函数的限制条件：
place n = [ q:row | row <- place(n-1) , q <- [1..x] , sameCol q row , safe q row i , i <- [0..(length row - 1)]]
sameCol q row = not ( q 'elem' row )
safe q row i = not ( abs(q - row !! i ) == (i + 1))

5、开始编译后发现各种出错。。貌似是 i 用得不符合要求，重新定义个函数吧

place n = [ q:row | row <- place(n-1) , q <- [1..8] , safe1 q row]
safe1 q row = and [ (not (sameCol q row i)) && (not (safe q row i)) | i <- [0..(length row -1)]]

6、中间的懒得写了。。。
